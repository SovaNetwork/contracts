# SovaBTC Pooled-Wrapper Implementation Rules

## Project Context
You are implementing the SovaBTC Pooled-Wrapper Upgrade - a multi-chain Bitcoin-backed token protocol with LayerZero OFT integration, redemption queues, and custodial controls. This builds on existing SovaBTC.sol functionality.

## Task Execution Rules

### Sequential Implementation
- ALWAYS complete tasks in order: Task 1 ‚Üí Task 2 ‚Üí Task 3 ‚Üí Task 4 ‚Üí Task 5 ‚Üí Task 6 ‚Üí Task 7
- Do NOT proceed to next task until current task passes ALL acceptance criteria
- Ask for explicit confirmation before moving between tasks
- If acceptance criteria aren't met, iterate on current task until they are

### Phase-Based Development
- **Phase 1 (Tasks 1-2)**: Foundation - whitelist and deposit functionality
- **Phase 2 (Task 3)**: Cross-chain - LayerZero OFT integration  
- **Phase 3 (Tasks 4-6)**: Advanced - queues, security, BTC redemption
- **Phase 4 (Task 7)**: Optional - staking and yield

### Current Task Tracking
Always explicitly state which task you're working on at the start of each response:
```
üéØ CURRENT TASK: Task X - [Brief Description]
üìã STATUS: [In Progress/Testing/Complete]
```

## Code Standards

### Solidity Best Practices
- Use Solidity ^0.8.20 for all contracts
- Follow OpenZeppelin patterns for security (Ownable, ReentrancyGuard, Pausable)
- Use SafeERC20 for all token transfers
- Implement proper error handling with custom errors
- Add comprehensive NatSpec documentation

### Architecture Patterns
- Inherit from established contracts (OpenZeppelin, LayerZero OFT)
- Use interfaces for contract interactions
- Implement modular design - separate concerns into different contracts
- Use events for all state changes
- Follow checks-effects-interactions pattern

### Required Imports
```solidity
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@layerzerolabs/oft-evm/contracts/OFT.sol"; // For Task 3
```

### Error Handling
- Use custom errors instead of require strings
- Provide descriptive error names and parameters
- Examples:
  ```solidity
  error TokenNotAllowed(address token);
  error InsufficientReserve(uint256 requested, uint256 available);
  error RedemptionNotReady(uint256 currentTime, uint256 readyTime);
  ```

## Task-Specific Guidelines

### Task 1: Whitelist Management
- Create `TokenWhitelist.sol` with mappings for allowed tokens and decimals
- Use `onlyOwner` modifier for admin functions
- Emit `TokenWhitelistUpdated` events
- Store decimals via `IERC20Metadata(token).decimals()`

### Task 2: Multi-Token Deposits
- Implement decimal conversion: `sovaAmount = amount * 10^(8 - tokenDecimals[token])`
- Use `nonReentrant` and `whenNotPaused` modifiers
- Validate minimum deposits in satoshis
- Add `adminMint` function to SovaBTC contract

### Task 3: LayerZero OFT Integration
- Inherit from LayerZero's `OFT` contract
- Configure endpoints per chain in constructor
- Restrict `adminMint` to wrapper contract only
- Test with LayerZero testnet endpoints first
- Maintain supply consistency across chains

### Task 4: Redemption Queue
- Create `RedemptionRequest` struct with all required fields
- Burn SovaBTC immediately on redemption request
- Implement configurable delay (default 10 days)
- Check reserves before accepting requests
- Prevent double fulfillment

### Task 5: Sova BTC Redemption
- Preserve existing `withdraw()` function from SovaBTC.sol
- Only implement on Sova chain deployment
- Use SovaBitcoin precompile for Bitcoin transactions
- Ensure immediate execution (no queue)

### Task 6: Security Controls
- Implement custody address restrictions
- Create admin roles with OpenZeppelin AccessControl
- Add emergency pause functionality
- Restrict withdrawals to custody addresses only
- Allow user redemption as exception

### Task 7: Staking (Optional)
- Use proven staking patterns (MasterChef-style)
- Implement reward-per-token calculation
- Support both SovaBTC and SOVA staking
- Consider cross-chain deployment

## Testing Requirements

### Each Task Must Include
- Unit tests for all functions
- Integration tests for cross-contract interactions
- Edge case testing (zero amounts, invalid tokens, etc.)
- Access control testing (only authorized users can call restricted functions)
- Event emission verification

### Test Structure
```solidity
// Use Foundry testing framework
contract TaskXTest is Test {
    // Setup, test functions, helper functions
}
```

### Required Test Coverage
- Happy path scenarios
- Error conditions and reverts
- Access control restrictions
- State changes and events
- Integration between contracts

## Documentation Standards

### Code Comments
- Add NatSpec for all public/external functions
- Explain complex logic with inline comments
- Document any deviations from standard patterns
- Include examples for complex functions

### README Updates
- Update README.md after each task completion
- Document deployment instructions
- Include configuration parameters
- Add integration examples

## Security Considerations

### Access Control
- Use OpenZeppelin's Ownable/AccessControl consistently
- Implement role-based permissions where needed
- Validate all inputs and state changes
- Use timelock for critical admin functions where appropriate

### Reentrancy Protection
- Use `nonReentrant` modifier for all external functions that modify state
- Follow checks-effects-interactions pattern
- Be especially careful with token transfers

### Integer Overflow/Underflow
- Use Solidity ^0.8.0 built-in protections
- Validate conversion logic carefully (especially decimal conversions)
- Test edge cases with maximum values

## Error Handling

### When Things Go Wrong
- If compilation fails, check imports and dependencies first
- If tests fail, debug step by step - don't proceed until fixed
- If deployment fails, verify constructor parameters and dependencies
- If integration fails, check interfaces and function signatures

### Ask for Help When
- LayerZero configuration is unclear
- Existing SovaBTC.sol integration needs clarification
- Security patterns are uncertain
- Cross-chain testing setup is needed

## Progress Tracking

### After Each Task
- Run all tests for the current task
- Verify acceptance criteria are met
- Update documentation
- Commit code with clear messages
- Ask for confirmation before proceeding

### Before Final Deployment
- Complete security review
- Run full test suite
- Verify all admin functions work
- Test upgrade/migration procedures if applicable

## Communication Protocol

### Status Updates
Provide regular updates in this format:
```
‚úÖ COMPLETED: [What was implemented]
üß™ TESTING: [Current test status]
‚ö†Ô∏è  BLOCKERS: [Any issues encountered]
üéØ NEXT: [What's coming next]
```

### Decision Points
- Ask for clarification when requirements are ambiguous
- Propose alternatives when implementation challenges arise
- Confirm major architectural decisions
- Request review for security-critical code

Remember: Quality over speed. It's better to implement each task thoroughly than to rush through and create technical debt. 